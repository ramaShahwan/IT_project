// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDbProject;

namespace MyDbProject.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220722143630_mark")]
    partial class mark
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyTables.Entities.CourseEntity", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language_Name")
                        .HasColumnType("int");

                    b.Property<int>("Level_Name")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLCourse")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("corse_descraption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MyTables.Entities.Course_LTEntity", b =>
                {
                    b.Property<int>("CourseLTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("LearnTrackId")
                        .HasColumnType("int");

                    b.HasKey("CourseLTId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearnTrackId");

                    b.ToTable("Course_LT");
                });

            modelBuilder.Entity("MyTables.Entities.Learn_TrackEntity", b =>
                {
                    b.Property<int>("LearnTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LearnTrackName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PhotoLearnTrack")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Specialize_Name")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("LearnTrackId");

                    b.ToTable("Learn_Tracks");
                });

            modelBuilder.Entity("MyTables.Entities.OpinionEntity", b =>
                {
                    b.Property<int>("OpinionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OpinionsId");

                    b.ToTable("opinions");
                });

            modelBuilder.Entity("MyTables.Entities.ScholarshipEntity", b =>
                {
                    b.Property<int>("ScholarshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ScholarshipImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialize_Name")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("ScholarshipId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Scholarships");
                });

            modelBuilder.Entity("MyTables.Entities.Std_ScholarshipEntity", b =>
                {
                    b.Property<int>("Std_ScholarshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Log_Scholarship")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScholarshipId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<bool>("Taken")
                        .HasColumnType("bit");

                    b.HasKey("Std_ScholarshipId");

                    b.HasIndex("ScholarshipId");

                    b.HasIndex("StudentId");

                    b.ToTable("Std_Scholarships");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.All_Information_For_Courses_In_LearnTrackEntity", b =>
                {
                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language_Name")
                        .HasColumnType("int");

                    b.Property<string>("LearnTrackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level_Name")
                        .HasColumnType("int");

                    b.Property<string>("URLCourse")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("All_Information_For_Courses_In_LearnTracks");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Count_Of_Student_In_LearnTrack_By_DateEntity", b =>
                {
                    b.Property<int>("CountOfStudent")
                        .HasColumnType("int");

                    b.ToTable("Count_Of_Student_In_LearnTrack_By_Dates");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Count_Of_Student_In_Specialize_Name_Of_LearnTrackEntity", b =>
                {
                    b.Property<int>("Count_Of_Student")
                        .HasColumnType("int");

                    b.ToTable("Count_Of_Student_In_Specialize_Name_Of_LearnTracks");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Count_Scholarships_For_One_University_TypeEntity", b =>
                {
                    b.Property<int>("Count_Scholarship")
                        .HasColumnType("int");

                    b.Property<string>("University_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.ToTable("CountScholarshipsForOneUniversityTypes");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Get_All_Scholarships_For_StudentEntity", b =>
                {
                    b.Property<int>("Count_Student_SCholarship")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_Log_Scholarship")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialize_Name")
                        .HasColumnType("int");

                    b.Property<string>("University_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.ToTable("GetAllScholarshipsForStudents");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Get_All_Users_As_StudentEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("GetAllUsersAsStudents");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Get_All_Users_As_UniversityEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("University_Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GetAllUsersAsUniversities");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Get_Rating_and_Count_For_LearnTrackEntity", b =>
                {
                    b.Property<string>("Count_Of_Courses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnTrackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating_For_LearnTrack")
                        .HasColumnType("real");

                    b.ToTable("Get_Rating_and_Count_For_LearnTracks");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Information_Of_LearnTrack_For_StudentEntity", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnTrackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialize_Name")
                        .HasColumnType("int");

                    b.ToTable("Information_Of_LearnTrack_For_Students");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.LearnTrack_For_SpecializeName_SelectedEntity", b =>
                {
                    b.Property<string>("LearnTrackName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LearnTrack_For_SpecializeName_Selecteds");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Level_For_Course_SelectedEntity", b =>
                {
                    b.Property<string>("Level_Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Level_For_Course_Selecteds");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Search_By_Courses_By_CourseId_And_Level_NameEntity", b =>
                {
                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language_Name")
                        .HasColumnType("int");

                    b.Property<string>("LearnTrackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level_Name")
                        .HasColumnType("int");

                    b.Property<int>("Specialize_Name")
                        .HasColumnType("int");

                    b.Property<string>("URLCourse")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Search_By_Courses_By_CourseId_And_Level_Names");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Search_For_LearnTrack_By_Specialize_NameEntity", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnTrackName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialize_Name")
                        .HasColumnType("int");

                    b.ToTable("Search_For_LearnTrack_By_Specialize_Names");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Search_Scholarship_By_Spec_UniverEntity", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End_Loging")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Loging")
                        .HasColumnType("datetime2");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.ToTable("SearchScholarshipBySpecUnivers");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.Select_Details_Scholarship_By_University_Or_StudentEntity", b =>
                {
                    b.Property<DateTime>("Date_Log_Scholarship")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specialize_Name")
                        .HasColumnType("int");

                    b.Property<string>("University_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.ToTable("Select_Details_Scholarship_By_University_Or_Students");
                });

            modelBuilder.Entity("MyTables.Entities.Stored_ProceduresEntities.UniversityNameByScholarEntity", b =>
                {
                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<string>("University_Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UniversityNameByScholars");
                });

            modelBuilder.Entity("MyTables.Entities.StudentEntity", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("Average")
                        .HasColumnType("real");

                    b.Property<float?>("Baccalaureate_mark")
                        .HasColumnType("real");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float?>("Master_mark")
                        .HasColumnType("real");

                    b.Property<float?>("National_examination_mark")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MyTables.Entities.Student_LTEntity", b =>
                {
                    b.Property<int>("Student_LTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LearnTrackId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartlearnTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Student_LTId");

                    b.HasIndex("LearnTrackId");

                    b.HasIndex("StudentId");

                    b.ToTable("Student_LTs");
                });

            modelBuilder.Entity("MyTables.Entities.UniversityEntity", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("University_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UniversityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("MyTables.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("profilePicture")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MyTables.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MyTables.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTables.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MyTables.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyTables.Entities.Course_LTEntity", b =>
                {
                    b.HasOne("MyTables.Entities.CourseEntity", "Course")
                        .WithMany("Course_Learn_Track")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTables.Entities.Learn_TrackEntity", "LearnTrack")
                        .WithMany("Course_LT")
                        .HasForeignKey("LearnTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LearnTrack");
                });

            modelBuilder.Entity("MyTables.Entities.ScholarshipEntity", b =>
                {
                    b.HasOne("MyTables.Entities.UniversityEntity", "University")
                        .WithMany("Scholarship")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("MyTables.Entities.Std_ScholarshipEntity", b =>
                {
                    b.HasOne("MyTables.Entities.ScholarshipEntity", "Scholarship")
                        .WithMany("Std_Scholarship")
                        .HasForeignKey("ScholarshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTables.Entities.StudentEntity", "Student")
                        .WithMany("Std_Scholarship")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scholarship");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MyTables.Entities.StudentEntity", b =>
                {
                    b.HasOne("MyTables.Entities.UserEntity", "user")
                        .WithOne("student")
                        .HasForeignKey("MyTables.Entities.StudentEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("MyTables.Entities.Student_LTEntity", b =>
                {
                    b.HasOne("MyTables.Entities.Learn_TrackEntity", "LearnTrack")
                        .WithMany("Student_LT")
                        .HasForeignKey("LearnTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyTables.Entities.StudentEntity", "Student")
                        .WithMany("Student_LTs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearnTrack");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MyTables.Entities.UniversityEntity", b =>
                {
                    b.HasOne("MyTables.Entities.UserEntity", "user")
                        .WithOne("university")
                        .HasForeignKey("MyTables.Entities.UniversityEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("MyTables.Entities.CourseEntity", b =>
                {
                    b.Navigation("Course_Learn_Track");
                });

            modelBuilder.Entity("MyTables.Entities.Learn_TrackEntity", b =>
                {
                    b.Navigation("Course_LT");

                    b.Navigation("Student_LT");
                });

            modelBuilder.Entity("MyTables.Entities.ScholarshipEntity", b =>
                {
                    b.Navigation("Std_Scholarship");
                });

            modelBuilder.Entity("MyTables.Entities.StudentEntity", b =>
                {
                    b.Navigation("Std_Scholarship");

                    b.Navigation("Student_LTs");
                });

            modelBuilder.Entity("MyTables.Entities.UniversityEntity", b =>
                {
                    b.Navigation("Scholarship");
                });

            modelBuilder.Entity("MyTables.Entities.UserEntity", b =>
                {
                    b.Navigation("student");

                    b.Navigation("university");
                });
#pragma warning restore 612, 618
        }
    }
}
